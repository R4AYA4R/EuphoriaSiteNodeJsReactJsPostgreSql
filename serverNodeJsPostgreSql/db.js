import { Sequelize } from "sequelize";

// еще раз дополнительно импортируем dotenv в этот файл db.js,так как sequelize его не видит,когда импортируем его в файле index.js,чтобы использовать переменные окружения в для указания пароля и тд,иначе sequelize выдает ошибку и не видит переменные окружения для пароля и тд,но можно и захардкодить эти значения(то есть не использовать переменные окружения,а указать сразу просто строковые значения),но лучше так не делать
import dotenv from 'dotenv';  // импортируем dotenv(в данном случае импортируем это вручную,потому что автоматически не импортируется)

dotenv.config(); // также дополнительно подключаем этот dotenv с помощью config(),чтобы sequelize видел переменные окружения в файле .env

// экспортируем объект на основе класса Sequelize,в котором передаем объект с настройками подключения к postgreSql
export default new Sequelize(

    process.env.DB_NAME, // указываем название базы данных из переменных окружения(которые указали в файле .env)

    process.env.DB_USER, // указываем имя пользователя,по которому подключаемся к postgreSql(в данном случае это имя postgres)

    process.env.DB_PASSWORD, // указываем пароль для подключения к postgreSql(этот пароль мы указывали при установке postgreSql на компьютер)

    // тут передаем объект с полями
    {
        dialect: 'postgres', // указываем dialect(диалект),типа mysql или другой базы данных,в данном случае используем базу данных postgreSql,поэтому указываем здесь postgres

        host: process.env.DB_HOST,  // указываем хост базы данных,в данном случае эта база данных на нашем компьютере,поэтому указываем localhost(это вынесли в переменную окружения)

        port: process.env.DB_PORT  // указываем порт базы данных,по умолчанию он стоит 5432(это вынесил в переменную окружения)

    }

)