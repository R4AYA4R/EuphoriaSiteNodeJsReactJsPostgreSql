# указываем на каком образе будет строиться наш образ,в данном случае указываем,что наш образ будет на основе образа node из dockerhub
FROM node

# обязательно добавляем рабочую директорию и в нее потом копируем файлы,иначе не запускаются тесты командой npm run test,так как если наши файлы тестов находятся в поддиректориях,то докер не может их найти, указываем рабочую директорию для нашего приложения,в которой на самом деле находится наше приложение(наши файлы этого приложения) и здесь через пробел указываем директорию(папку),в которой будут лежать все эти файлы нашего приложения(/app в данном случае)
WORKDIR /app

# копируем файл package.json в корневую папку образа(image) докера,в данно случае в рабочую директорию /app,чтобы докер кешировал файлы и не изменял(скачивал) их заново,если они не изменились(чтобы последующие билды(сборки) образов занимали меньше времени и не измененные файлы не перезаписывались)
COPY package.json /app

# указываем команду,которая будет запущена только при сборке образа(в данном случае чтобы установить node модули(зависимости,библиотеки))
RUN npm install

# копируем все файлы из локальной директории(где сейчас находится докер файл) в докер образ(корневую папку образа),в данном случае в нашу рабочую папку /app
COPY . /app

# указываем команду,чтобы сбилдить(собрать) проект фронтенда(в итоге после этого билда(код react js скомпилируется в один файл js) будут только файл js,html и css,и в докер образе появится папка /dist,в которой эти файлы и будут и их нужно отдать в nginx сервер) и поэтому,чтобы эти статические файлы(js,html,css) могли раздаваться(то есть работать как и мы это спрограммировали и взаимодействовать с бэкэндом),то нужно запустить какой-то сервер для них,чтобы он их раздавал,в данном случае будем использовать сервер nginx для этого,но в данном случае пока не используем nginx сервер и просто запустим приложение командой npm start
RUN npm run build

# указываем команду,которая будет запущена каждый раз при запуске контейнера,в данном случае чтобы запустить наш фронтенд на react js просто для теста,и при запуске этого контейнера,наш фронтенд сайт будет локально запущен на порту,который мы укажем в docker compose или тут в докер файле в поле EXPOSE,но обычно лучше использовать сервер типа nginx,чтобы раздавать статические файлы нашего фронтенда,которые уже будут собраны командой npm run build
CMD [ "npm", "start" ]